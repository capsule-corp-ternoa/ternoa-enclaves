# Rust manifest example

loader.entrypoint = "file:{{ gramine.libos }}"
libos.entrypoint = "{{ self_exe }}"
loader.log_level = "{{ log_level }}"

loader.env.LD_LIBRARY_PATH = "/lib:{{ arch_libdir }}"

# See https://gramine.readthedocs.io/en/latest/devel/performance.html#glibc-malloc-tuning
loader.env.MALLOC_ARENA_MAX = "1"

# For easier debugging — not strictly required to run this workload
loader.env.RUST_BACKTRACE = "full"

# ROOT FILE SYSTEM ON GRAMINE FROM HOST
# TYPE can be chroot, encrypted, tmpfs(in-memory)
#fs.root.type = "chroot"
#fs.root.uri  = "file:/home/ubuntu/ternoa_gramine/sgx_server/"
#fs.start_dir = "/"

# MOUNTING FROM "URI" ON HOST, TO "PATH" ON GRAMINE
# TYPE can be chroot, encrypted, tmpfs(in-memory)
fs.mounts = [
  { path = "/lib", uri = "file:{{ gramine.runtimedir() }}" },
  { path = "{{ arch_libdir }}", uri = "file:{{ arch_libdir }}" },
  { path = "/etc", uri = "file:/etc" },
  { path = "/credentials/keys/" , uri = "file:/home/ubuntu/ternoa_gramine/sgx_server/credentials/keys/",  type = "encrypted", "key_name" = "DevOnlyKey"},
  { path = "/credentials/nft/" , uri = "file:/home/ubuntu/ternoa_gramine/sgx_server/credentials/nft/",  type = "encrypted", "key_name" = "DevOnlyKey"},
]

# Only for development and debug, it will be replaced with _mrencalve/_mrsigner for production
fs.insecure__keys."DevOnlyKey" = "0123456789ABCDEF0123456789ABCDEF"

sgx.debug = true
sgx.nonpie_binary = true
loader.insecure__use_cmdline_argv = true

loader.pal_internal_mem_size = "64M"

sgx.trusted_files = [
  "file:{{ gramine.libos }}",
  "file:{{ self_exe }}",
  "file:{{ gramine.runtimedir() }}/",
  "file:{{ arch_libdir }}/",
  "file:/etc/nsswitch.conf",
  "file:/etc/host.conf",
  "file:/etc/resolv.conf",
  "file:/etc/hosts",
  "file:/etc/group",
  "file:/etc/passwd",
  "file:/etc/gai.conf",
  "file:/etc/ssl/certs/ca-certificates.crt",
  "file:/etc/sgx_default_qcnl.conf",
  "file:credentials/artifacts/",
  "file:credentials/certificates/ssl_certs/141-94-162-96/",
  "file:credentials/assets/",
]


# The Tokio runtime requires eventfd, and the Gramine implementation
# currently relies on the host in an insecure manner. This setting isn't
# suitable for production deployment, but works well as a stopgap during
# development while a proper implementation in Gramine is being worked on.
sys.insecure__allow_eventfd = true

# The maximum number of threads in a single process needs to be declared in advance.
# You need to account for:
# - one main thread
# - the tokio worker threads
# - any threads and threadpools you might be starting
# - helper threads internal to Gramine — see:
#   https://gramine.readthedocs.io/en/latest/manifest-syntax.html#number-of-threads
sgx.thread_num = 24


#sgx.file_check_policy = "allow_all_but_log" #"strict"
